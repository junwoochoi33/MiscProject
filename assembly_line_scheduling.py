
def assembly_line_scheduling(a, t, e, x):
    """
    a: 작업 시간 (2 x n 리스트)
    t: 라인 전환 시간 (2 x (n-1) 리스트)
    e: 진입 시간 (2 원소 리스트)
    x: 종료 시간 (2 원소 리스트)
    """

    n = len(a[0])
    T1 = [0] * n # 라인 1에서 i번째 스테이션까지의 최소 시간
    T2 = [0] * n # 라인 2에서 i번째 스테이션까지의 최소 시간
    L1 = [0] * n # 경로 추적을 위한 기록 (라인 1의 이전 라인)
    L2 = [0] * n # 경로 추적을 위한 기록 (라인 2의 이전 라인)

    # 초기 진입 시간
    T1[0] = e[0] + a[0][0]
    T2[0] = e[1] + a[1][0]

    for i in range(1, n):
        # 핵심: 지금 현재 라인을 기준으로 "이전에 어디에서 왔는지"를 두 가지 경로로 비교

        # 라인 1의 i번째 작업에 도달하는 두 가지 방법 중 최소 선택:
        # 1. 이전에도 라인 1에서 계속 -> T1[i-1] + a[0][i]
        # 2. 라인 2에서 전환 → 라인 1로 변경 + 전환 시간 + 작업 시간
        #    -> T2[i-1] + t[1][i-1] + a[0][i]
        if T1[i-1] + a[0][i] <= T2[i-1] + t[1][i-1] + a[0][i]:
            T1[i] = T1[i-1] + a[0][i]
            L1[i] = 1 # 이전 스테이션도 라인 1
        else:
            T1[i] = T2[i-1] + t[1][i-1] + a[0][i]
            L1[i] = 2

        # 라인 2의 i번째 작업에 도달하는 두 가지 방법 중 최소 선택:
        # 1. 이전에도 라인 2에서 계속 -> T2[i-1] + a[1][i]
        # 2. 라인 1에서 전환 → 라인 2로 변경 + 전환 시간 + 작업 시간
        #    -> T1[i-1] + t[0][i-1] + a[1][i]
        if T2[i-1] + a[1][i] <= T1[i-1] + t[0][i-1] + a[1][i]:
            T2[i] = T2[i-1] + a[1][i]
            L2[i] = 2 # 이전 스테이션도 라인 2
        else:
            T2[i] = T1[i-1] + t[0][i-1] + a[1][i]
            L2[i] = 1 # 이전 스테이션은 라인 1


    # 마지막 종료 시간 포함한 최종 최소 시간 및 최종 라인 결정
    if T1[-1] + x[0] <= T2[-1] + x[1]:
        final_time = T1[-1] + T1[-1] + x[0]
        last_line = 1
    else:
        final_time = T2[-1] + x[1]
        last_line = 2

    path = [0] * n
    path[-1] = last_line
    for i in range(n - 2, -1, -1):
        if path[i+1] == 1:
            path[i] = L1[i+1]
        else:
            path[i] = L2[i+1]

    return final_time, path

# if __name__ == '__main__':
#     a = [[7, 9, 3, 4, 8, 4],
#          [8, 5, 6, 4, 5, 7]]
#     t = [[2, 1, 1, 3, 4],
#          [2, 1, 2, 2, 1]]
#     e = [2, 4]
#     x = [3, 2]
#
#     time, path = assembly_line_scheduling(a, t, e, x)
#     print(f"최소 시간: {time}")
#     print(f"경로: {path}")